{"remainingRequest":"/Users/dezhi/Documents/HBuilderProjects/vv-company-a/node_modules/thread-loader/dist/cjs.js!/Users/dezhi/Documents/HBuilderProjects/vv-company-a/node_modules/babel-loader/lib/index.js!/Users/dezhi/Documents/HBuilderProjects/vv-company-a/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/dezhi/Documents/HBuilderProjects/vv-company-a/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dezhi/Documents/HBuilderProjects/vv-company-a/src/components/page/ResAllocate.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/dezhi/Documents/HBuilderProjects/vv-company-a/src/components/page/ResAllocate.vue","mtime":1700516853244},{"path":"/Users/dezhi/Documents/HBuilderProjects/vv-company-a/babel.config.js","mtime":1594005027000},{"path":"/Users/dezhi/Documents/HBuilderProjects/vv-company-a/node_modules/cache-loader/dist/cjs.js","mtime":1700597100915},{"path":"/Users/dezhi/Documents/HBuilderProjects/vv-company-a/node_modules/thread-loader/dist/cjs.js","mtime":1700597099864},{"path":"/Users/dezhi/Documents/HBuilderProjects/vv-company-a/node_modules/babel-loader/lib/index.js","mtime":1700597101172},{"path":"/Users/dezhi/Documents/HBuilderProjects/vv-company-a/node_modules/cache-loader/dist/cjs.js","mtime":1700597100915},{"path":"/Users/dezhi/Documents/HBuilderProjects/vv-company-a/node_modules/vue-loader/lib/index.js","mtime":1700597101337}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.map\";\nimport mapboxgl from 'mapbox-gl';\nimport draggable from 'vuedraggable';\nvar id = 100;\nexport default {\n  name: 'resallocate',\n  data: function data() {\n    return {\n      map: null,\n      resname: '',\n      list0: [{\n        name: 'Andy',\n        id: 8,\n        type: 'human'\n      }, {\n        name: 'Lucy',\n        id: 9,\n        type: 'human'\n      }, {\n        name: 'Mike',\n        id: 10,\n        type: 'human'\n      }, {\n        name: 'T11',\n        id: 11,\n        type: 'truck'\n      }],\n      list1: [{\n        name: 'John',\n        id: 1,\n        type: 'human'\n      }, {\n        name: 'Joao',\n        id: 2,\n        type: 'human'\n      }, {\n        name: 'Jean',\n        id: 3,\n        type: 'human'\n      }, {\n        name: 'T12',\n        id: 4,\n        type: 'truck'\n      }],\n      list2: [{\n        name: 'T54',\n        id: 5,\n        type: 'truck'\n      }, {\n        name: 'Edgard',\n        id: 6,\n        type: 'human'\n      }, {\n        name: 'T29',\n        id: 7,\n        type: 'truck'\n      }],\n      list3: [{\n        name: 'Karman',\n        id: 15,\n        type: 'human'\n      }, {\n        name: 'T58',\n        id: 16,\n        type: 'truck'\n      }, {\n        name: 'T33',\n        id: 17,\n        type: 'truck'\n      }]\n    };\n  },\n  mounted: function mounted() {\n    // Initialize the map\n    mapboxgl.accessToken = 'pk.eyJ1IjoiZHowMDc3IiwiYSI6ImNsb3Z2azBndTB0ZGwyanFnNmR3NWx4NmQifQ.R2RTAvfJAI8ofToD3Ajy3A';\n    this.map = new mapboxgl.Map({\n      container: 'map',\n      // container ID\n      style: 'mapbox://styles/mapbox/streets-v11',\n      // style URL\n      center: [-123.13183569070522, 49.24748280844511],\n      // starting position as [longitude, latitude]\n      zoom: 9 // starting zoom\n    });\n\n    // Add a marker to the map - Richmond\n    var marker1 = new mapboxgl.Marker().setLngLat([-123.121213, 49.150521]).addTo(this.map);\n\n    // Add a marker to the map - Surrey\n    var marker2 = new mapboxgl.Marker().setLngLat([-122.840154, 49.152908]).addTo(this.map);\n\n    // Create popups for  marker1 and marker2\n    var popup1 = new mapboxgl.Popup({\n      closeButton: false,\n      closeOnClick: false\n    }).setHTML('This is Project 1, with Data ...TBD');\n    var popup2 = new mapboxgl.Popup({\n      closeButton: false,\n      closeOnClick: false\n    }).setHTML('This is Project 2, and Data ...TBD');\n\n    // Set popups to appear on mouseenter and disappear on mouseleave\n    marker1.setPopup(popup1).on('mouseenter', function () {\n      popup1.addTo(this.map);\n    }).on('mouseleave', function () {\n      popup1.remove();\n    });\n    marker2.setPopup(popup2).on('mouseenter', function () {\n      popup2.addTo(this.map);\n    }).on('mouseleave', function () {\n      popup2.remove();\n    });\n  },\n  methods: {\n    addPeople: function addPeople() {\n      if (this.resname) {\n        this.list0.push({\n          name: this.resname,\n          id: id++,\n          type: 'human'\n        });\n        this.resname = '';\n      } else {\n        this.$notify({\n          title: 'Warning',\n          message: 'This button will add people to the pool. Please input his/her name first.',\n          type: 'warning'\n        });\n      }\n    },\n    addTruck: function addTruck() {\n      if (this.resname) {\n        this.list0.push({\n          name: this.resname,\n          id: id++,\n          type: 'truck'\n        });\n        this.resname = '';\n      } else {\n        this.$notify({\n          title: 'Warning',\n          message: 'This button will add truck to the pool. Please input truck No. first.',\n          type: 'warning'\n        });\n      }\n    },\n    removeHandle: function removeHandle(event) {\n      console.log(event);\n      //this.$message.success(`From ${event} moved to ${event} `);\n    },\n\n    add: function add() {\n      this.list.push({\n        name: 'Juan'\n      });\n    },\n    replace: function replace() {\n      this.list = [{\n        name: 'Edgard'\n      }];\n    },\n    clone: function clone(el) {\n      return {\n        name: el.name + ' cloned'\n      };\n    },\n    log: function log(evt) {\n      window.console.log(evt);\n      // Check if 'added' is a property of myObject\n      if (evt.hasOwnProperty('added')) {\n        //console.log(evt.added.element.name);\n        this.$message.success(\"\".concat(evt.added.element.name, \" joined a new project!\"));\n      }\n    }\n  },\n  components: {\n    draggable: draggable\n  }\n};",null]}